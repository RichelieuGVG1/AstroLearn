import telebot
from telebot import types
from game import play, create_random
import random



bot = telebot.TeleBot('1736780989:AAHppwjEPVMt-X4icSQOsm-zxxGOkcQyvUE')

@bot.message_handler(commands=['start'])
def send_welcome(message):

    with open('ded.txt', 'r') as file:
    	count=int(file.read())
    	file.close()
    count=0
    with open('ded.txt', 'w') as file:
    	file.write(str(count))
    	file.close()

    bot.send_message(message.chat.id, f"–Ø `–±–æ—Ç`. *–ü—Ä–∏—è—Ç–Ω–æ* _–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è_ ", parse_mode= 'Markdown', reply_markup=keyboard())
    bot.send_photo(message.chat.id, 'https://upload.wikimedia.org/wikipedia/commons/3/36/Retivow.jpg')

@bot.message_handler(commands=['learn'])
def send_welcome(message):
    get_messages(message)


@bot.message_handler(content_types=["text"] )
def get_messages(message):  
    
    chat_id = message.chat.id
    if message.text == '–£—á–∏—Ç—å—Å—èüìö' or message.text == '–î–∞–ª–µ–µ‚û°Ô∏è':
    	learning(chat_id)
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüí¨' :
        menu(chat_id)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É‚õî': 
        game_interrupted(chat_id)
    elif message.text == '–°–¥–∞—Ç—å —Ç–µ—Å—ÇüñäÔ∏è': 
        playing(chat_id)

    elif message.text == '–ü–æ–º–æ—â—åüöë':
    	help(chat_id)

    elif message.text == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å‚ùì':
    	playing(chat_id)


    else:
    	bot.send_message(chat_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–∞–¥–∞—Ç—å –ø–∞–ª—å—Ü–∞–º–∏ –ø–æ –∫–ª–∞–≤–∏—à–∞–º.', parse_mode= 'Markdown', reply_markup=keyboard())

    #bot.send_message(chat_id, f"{ded}", parse_mode= 'Markdown', reply_markup=keyboard())
    
@bot.callback_query_handler(func=lambda call1: not call1.data.startswith('t'))
def query_handler(call1):

    bot.answer_callback_query(callback_query_id=call1.id)
    answer = ''
    #call=call.data
    printed(call1)



def learning(chat_id):
    
	
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–∑–≤–µ–∑–¥–∏–µ:", parse_mode='HTML',reply_markup=answers())

def menu(chat_id):
    bot.send_message(chat_id, "–ù–∞—á–Ω–∏—Ç–µ —Å—ã–∑–Ω–æ–≤–∞." ,parse_mode='HTML',reply_markup=keyboard())

def game_interrupted(chat_id):
    with open('ded.txt', 'r') as file:
    	count=int(file.read())
    	file.close()
    count=0
    with open('ded.txt', 'w') as file:
	    	file.write(str(count))
	    	file.close()
    bot.send_message(chat_id, "–í—ã –ø–æ–∑–æ—Ä–Ω–æ –∫–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞–ª–∏. –ê –≤–µ–¥—å —Ç–µ—Å—Ç –±—ã–ª –ø—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ!" ,parse_mode='HTML',reply_markup=keyboard())

def game_ended(chat_id):
    with open('ded.txt', 'r') as file:
    	count=int(file.read())
    	file.close()
    count=0
    with open('ded.txt', 'w') as file:
	    	file.write(str(count))
	    	file.close()
    bot.send_message(chat_id, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:" ,parse_mode='HTML',reply_markup=keyboard())

def playing(chat_id):
    text = '–∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!'

    with open('ded.txt', 'r') as file:
    	count=int(file.read())
    	file.close()
    global answer
    pic, answer, out = create_random()


    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–∑–≤–µ–∑–¥–∏—è:', parse_mode='HTML', reply_markup=ans_key(answer,out))
    bot.send_photo(chat_id, pic)

    count+=1


    if count==11:
    	game_ended(chat_id)
    else:
	    with open('ded.txt', 'w') as file:
	    	file.write(str(count))
	    	file.close()





def help(chat_id):
    text="–ó–¥–µ—Å—å –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ä–∞–∑–ª–∏—á–∞—Ç—å —Å–æ–∑–≤–µ–∑–¥–∏—è –ó–∏–º–Ω–µ–≥–æ –ø–æ–ª—É—à–∞—Ä–∏—è –Ω–∞ –Ω–æ—á–Ω–æ–º –Ω–µ–±–µ. –ù–∞ –≤—ã–±–æ—Ä —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏: *–æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π*\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É _–£—á–∏—Ç—å—Å—è_. –í–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å–æ–∑–≤–µ–∑–¥–∏–π –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö, –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É _–°–¥–∞—Ç—å —Ç–µ—Å—Ç_. –ü–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≥–∞–¥–∞—Ç—å, —á—Ç–æ –Ω–∞ –Ω–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ.\n\n*–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å*"
    bot.send_message(chat_id, text, parse_mode= 'Markdown', reply_markup=keyboard())

@bot.callback_query_handler(func=lambda call1: not call1.data.startswith('t'))
def printed(call1):
    bot.answer_callback_query(callback_query_id=call1.id, text='–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑—É—á–µ–Ω')
    data=play()
    out=data[int(call1.data)]
    bot.send_photo(call1.message.chat.id, out[0])
    bot.send_message(call1.message.chat.id, out[1], parse_mode='Markdown', reply_markup=k2())



@bot.callback_query_handler(func=lambda call: call.data.startswith('t'))
def key_call(call):
    bot.answer_callback_query(callback_query_id=call.id, text='–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç')
    #bot.send_message(call.message.chat.id, f"{answer}, {call.data[1:]}", parse_mode='HTML',reply_markup=keyboard1())
    if int(call.data[1:]) == int(answer):
        bot.send_message(call.message.chat.id, '*–í–∞—à –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!*‚úÖ', parse_mode='Markdown',reply_markup=keyboard1())
    else:
    	bot.send_message(call.message.chat.id, '*–í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π*‚ùå', parse_mode='Markdown',reply_markup=keyboard1())

def ans_key(answer, out):
    markup = telebot.types.InlineKeyboardMarkup()

    markup.add(telebot.types.InlineKeyboardButton(text=out[0], callback_data='t0'))
    markup.add(telebot.types.InlineKeyboardButton(text=out[1], callback_data='t1'))
    markup.add(telebot.types.InlineKeyboardButton(text=out[2], callback_data='t2'))
    markup.add(telebot.types.InlineKeyboardButton(text=out[3], callback_data='t3'))
    return markup

def keyboard():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn0 = types.KeyboardButton("–ü–æ–º–æ—â—åüöë")
    btn1 = types.KeyboardButton('–£—á–∏—Ç—å—Å—èüìö')
    btn2 = types.KeyboardButton('–°–¥–∞—Ç—å —Ç–µ—Å—ÇüñäÔ∏è')

    markup.add(btn0)
    markup.add(btn1)
    markup.add(btn2)
    return markup  

def keyboard1():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn0 = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å‚ùì')
    btn1 = types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É‚õî')

    markup.add(btn0)
    markup.add(btn1)
    return markup

def k2():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn0 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüí¨')
    btn1 = types.KeyboardButton('–î–∞–ª–µ–µ‚û°Ô∏è')

    markup.add(btn0)
    markup.add(btn1)
    return markup

def answers():
    
    markup = telebot.types.InlineKeyboardMarkup()

    markup.add(telebot.types.InlineKeyboardButton(text='–û—Ä–∏–æ–Ω', callback_data='0'))
    markup.add(telebot.types.InlineKeyboardButton(text='–ë–æ–ª—å—à–∞—è –ú–µ–¥–≤–µ–¥–∏—Ü–∞', callback_data='1'))
    markup.add(telebot.types.InlineKeyboardButton(text='–ì–µ—Ä–∫—É–ª–µ—Å', callback_data='2'))
    markup.add(telebot.types.InlineKeyboardButton(text='–õ–µ–±–µ–¥—å', callback_data='3'))
    markup.add(telebot.types.InlineKeyboardButton(text='–õ–∏—Ä–∞', callback_data='4'))
    markup.add(telebot.types.InlineKeyboardButton(text='–ë–ª–∏–∑–Ω–µ—Ü—ã', callback_data='5'))
    markup.add(telebot.types.InlineKeyboardButton(text='–õ–µ–≤', callback_data='6'))
    markup.add(telebot.types.InlineKeyboardButton(text='–í–æ–ª–æ–ø–∞—Å', callback_data='7'))
    markup.add(telebot.types.InlineKeyboardButton(text='–ü–µ—Ä—Å–µ–π', callback_data='8'))
    markup.add(telebot.types.InlineKeyboardButton(text='–ú–∞–ª–∞—è –ú–µ–¥–≤–µ–¥–∏—Ü–∞', callback_data='9'))

    return markup

if __name__ == "__main__":
    bot.polling(none_stop=True)
